import { describe, it, expect, beforeAll, afterEach, afterAll, vi } from 'vitest';
import { rest } from 'msw';
import { setupServer } from 'msw/node';
import { EmbeddingService, EmbeddingProvider } from '../shared/embedding';

// Mock the transformers library
vi.mock('@xenova/transformers', () => ({
  pipeline: vi.fn().mockResolvedValue(
    (text: string, options: any) => {
      // Return a mock embedding based on text length
      const mockEmbedding = new Array(384).fill(text.length / 100);
      return { data: mockEmbedding };
    }
  ),
}));

// Setup MSW to mock API calls
const server = setupServer(
  // Mock OpenAI API to always fail
  rest.post('https://api.openai.com/v1/embeddings', (req, res, ctx) => {
    return res(ctx.status(500), ctx.json({ error: 'Internal Server Error' }));
  })
);

beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());

describe('EmbeddingService Fallback Mechanism', () => {
  it('should fallback to local HuggingFace model when OpenAI fails', async () => {
    // Arrange
    const textToEmbed = 'This is a test sentence.';
    const config = {
      provider: EmbeddingProvider.OPENAI, // Start with OpenAI
      model: 'text-embedding-ada-002',
      apiKey: 'sk-fake-key',
    };
    
    const embeddingService = EmbeddingService.getInstance(config);

    // Act
    const response = await embeddingService.generateEmbedding(textToEmbed, config);

    // Assert
    // 1. Check that the response is not null and has an embedding
    expect(response).not.toBeNull();
    expect(response.embedding).toBeDefined();
    expect(response.embedding.length).toBe(384); // Fallback model dimension

    // 2. Check that the provider in the response is the fallback provider
    expect(response.model).toBe('Xenova/all-MiniLM-L6-v2');
    
    // 3. Check if the mock embedding is returned (based on our mock logic)
    const expectedValue = textToEmbed.length / 100;
    expect(response.embedding[0]).toBe(expectedValue);

    // 4. Verify that the transformers.js pipeline was called
    const { pipeline } = await import('@xenova/transformers');
    expect(pipeline).toHaveBeenCalledWith('feature-extraction', 'Xenova/all-MiniLM-L6-v2');
  });
});
