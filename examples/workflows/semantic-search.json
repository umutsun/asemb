{
  "name": "Semantic Search API",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "search",
        "responseMode": "onReceived",
        "responseData": "allEntries",
        "options": {}
      },
      "id": "webhook-1",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "search-api"
    },
    {
      "parameters": {
        "query": "={{ $json.body.query }}",
        "table": "embeddings",
        "limit": "={{ $json.body.limit || 10 }}",
        "distanceOperator": "{{ $json.body.mode === 'cosine' ? '<=>' : '<->' }}",
        "returnColumns": "id,text,metadata,similarity",
        "threshold": "={{ $json.body.threshold || 0.7 }}"
      },
      "id": "search-1",
      "name": "PgVector Search",
      "type": "n8n-nodes-alice-semantic-bridge.pgvectorQuery",
      "typeVersion": 1,
      "position": [450, 300],
      "credentials": {
        "postgresWithVectorApi": {
          "id": "1",
          "name": "Postgres with pgvector"
        },
        "openAIApi": {
          "id": "2",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Enrich and format results\nconst results = $input.all();\n\nreturn results.map(item => {\n  const similarity = parseFloat(item.json.similarity);\n  \n  return {\n    json: {\n      id: item.json.id,\n      content: item.json.text,\n      score: similarity,\n      relevance: similarity > 0.9 ? 'high' : similarity > 0.7 ? 'medium' : 'low',\n      metadata: {\n        ...item.json.metadata,\n        retrieved_at: new Date().toISOString()\n      }\n    }\n  };\n});"
      },
      "id": "function-1",
      "name": "Format Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Search-Count",
                "value": "={{ $items().length }}"
              }
            ]
          }
        }
      },
      "id": "respond-1",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [850, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "PgVector Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PgVector Search": {
      "main": [
        [
          {
            "node": "Format Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Results": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": false,
    "callerPolicy": "any",
    "errorWorkflow": ""
  },
  "staticData": null,
  "pinData": {},
  "versionId": "search-api-v1"
}