name: Continuous Deployment

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: "Build and Push Docker Images"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # --------------------------------------------------
      # Önce CI adımlarını tekrar çalıştırarak doğrula
      # --------------------------------------------------
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install Node.js dependencies
        run: npm ci
      - name: Run Node.js linter
        run: npm run lint
      - name: Run Node.js tests
        run: npm test
        env:
          CI: true

      # --------------------------------------------------
      # Docker imajlarını build et ve push'la
      # --------------------------------------------------
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }} # GitHub Secret -> GH_PAT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Node.js service image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./backend/Dockerfile # Dockerfile yolunu doğrulayın
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/asb-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Python service image
        uses: docker/build-push-action@v4
        with:
          context: ./RAG-anything
          file: ./RAG-anything/Dockerfile # Dockerfile yolunu doğrulayın
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/rag-anything:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }} # GitHub Secret -> SSH_PRIVATE_KEY
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts # GitHub Secret -> SSH_HOST

      - name: Deploy to Server
        env:
          GIT_SHA: ${{ github.sha }}
          REPO_OWNER: ${{ github.repository_owner }}
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            cd /home/ubuntu/alice-semantic-bridge # Sunucudaki proje yolunu güncelleyin

            # .env dosyasını GitHub Secrets tan oluştur
            echo "${{ secrets.ENV_FILE_PRODUCTION }}" > .env.production

            # Docker Compose dosyasındaki imaj etiketlerini güncelle
            # Not: Bu, docker-compose.yml dosyanızın imaj isimlerini değişken olarak almasını gerektirir.
            # Örnek: image: ghcr.io/owner/asb-backend:${BACKEND_IMAGE_TAG}
            export BACKEND_IMAGE_TAG=${GIT_SHA}
            export PYTHON_IMAGE_TAG=${GIT_SHA}
            export DOCKER_REGISTRY=ghcr.io/${REPO_OWNER}

            # Yeni imajları çek
            docker-compose -f docker-compose.prod.yml pull

            # Servisleri yeniden başlat
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans

            # Eski, kullanılmayan Docker imajlarını temizle (isteğe bağlı)
            docker image prune -f
          '
        # GitHub Secrets -> SSH_USER, SSH_HOST, ENV_FILE_PRODUCTION
