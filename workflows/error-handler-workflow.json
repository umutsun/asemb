{
  "name": "ASB-Error-Handler",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "asb-process",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook_trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "process_id",
              "value": "={{ $uid() }}"
            },
            {
              "name": "started_at",
              "value": "={{ new Date().toISOString() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "init_process",
      "name": "Initialize Process",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [450, 300]
    },
    {
      "parameters": {
        "continueOnFail": false
      },
      "id": "try_block",
      "name": "Try Block",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [650, 200],
      "continueOnFail": false,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "={{ $json.api_endpoint }}",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "data",
              "value": "={{ JSON.stringify($json.payload) }}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 1000
          }
        }
      },
      "id": "main_operation",
      "name": "Main Operation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [850, 200],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 1000,
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO process_logs (process_id, status, data, created_at) VALUES ($1, $2, $3, NOW())",
        "options": {}
      },
      "id": "log_success",
      "name": "Log Success",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [1050, 200],
      "credentials": {
        "postgres": {
          "id": "asb-postgres",
          "name": "ASB PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "triggerOn": "workflowError"
      },
      "id": "error_trigger",
      "name": "Error Trigger",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [650, 400]
    },
    {
      "parameters": {
        "jsCode": "// Capture error details\nconst error = $input.all()[0]?.json?.error || {};\nconst execution = $input.all()[0]?.json?.execution || {};\n\nconst errorDetails = {\n  process_id: execution.id || 'unknown',\n  error_type: error.name || 'UnknownError',\n  error_message: error.message || 'An error occurred',\n  error_stack: error.stack || '',\n  node_name: error.node?.name || 'unknown',\n  node_type: error.node?.type || 'unknown',\n  timestamp: new Date().toISOString(),\n  context: {\n    workflow_id: $workflow.id,\n    workflow_name: $workflow.name,\n    execution_id: $execution.id,\n    retry_count: $execution.retryOf?.length || 0\n  }\n};\n\nreturn [{ json: errorDetails }];"
      },
      "id": "capture_error",
      "name": "Capture Error Details",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 400]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO error_logs (process_id, error_type, error_message, error_stack, node_info, created_at) VALUES ($1, $2, $3, $4, $5, NOW())",
        "options": {}
      },
      "id": "log_error",
      "name": "Log Error to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [1050, 400],
      "credentials": {
        "postgres": {
          "id": "asb-postgres",
          "name": "ASB PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "authentication": "webhook",
        "channel": "asb-alerts",
        "text": "ðŸš¨ *Error in ASB Workflow*\n\n*Process ID:* {{ $json.process_id }}\n*Error Type:* {{ $json.error_type }}\n*Message:* {{ $json.error_message }}\n*Node:* {{ $json.node_name }}\n*Time:* {{ $json.timestamp }}\n\n*Action Required:* Please check the error logs for more details.",
        "otherOptions": {
          "mrkdwn": true
        }
      },
      "id": "notify_slack",
      "name": "Notify Slack",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1250, 400],
      "credentials": {
        "slackApi": {
          "id": "asb-slack",
          "name": "ASB Slack"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.context.retry_count }}",
              "operation": "smaller",
              "value2": 3
            }
          ]
        }
      },
      "id": "check_retry",
      "name": "Check Retry Count",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1450, 400]
    },
    {
      "parameters": {
        "amount": 5000,
        "unit": "milliseconds"
      },
      "id": "wait_before_retry",
      "name": "Wait Before Retry",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1650, 350]
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "options": {}
      },
      "id": "retry_workflow",
      "name": "Retry Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [1850, 350]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "failed_after_retries"
            },
            {
              "name": "final_error",
              "value": "={{ $json.error_message }}"
            }
          ],
          "number": [
            {
              "name": "total_retries",
              "value": "={{ $json.context.retry_count }}"
            }
          ]
        },
        "options": {}
      },
      "id": "final_failure",
      "name": "Final Failure Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [1650, 450]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "message",
              "value": "Process completed successfully"
            }
          ]
        },
        "options": {}
      },
      "id": "success_response",
      "name": "Success Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [1250, 200]
    }
  ],
  "connections": {
    "webhook_trigger": {
      "main": [
        [
          {
            "node": "init_process",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "init_process": {
      "main": [
        [
          {
            "node": "try_block",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "try_block": {
      "main": [
        [
          {
            "node": "main_operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "main_operation": {
      "main": [
        [
          {
            "node": "log_success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "log_success": {
      "main": [
        [
          {
            "node": "success_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "error_trigger": {
      "main": [
        [
          {
            "node": "capture_error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "capture_error": {
      "main": [
        [
          {
            "node": "log_error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "log_error": {
      "main": [
        [
          {
            "node": "notify_slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "notify_slack": {
      "main": [
        [
          {
            "node": "check_retry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_retry": {
      "main": [
        [
          {
            "node": "wait_before_retry",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "final_failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "wait_before_retry": {
      "main": [
        [
          {
            "node": "retry_workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveDataSuccessExecution": "all",
    "saveDataErrorExecution": "all",
    "executionTimeout": 300,
    "errorWorkflow": "asb-error-notification"
  }
}