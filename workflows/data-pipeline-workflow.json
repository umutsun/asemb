{
  "name": "ASB-Data-Pipeline",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 6
            }
          ]
        }
      },
      "id": "schedule_trigger",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, content, metadata, created_at FROM documents WHERE processed = false LIMIT 100",
        "options": {}
      },
      "id": "fetch_documents",
      "name": "Fetch Unprocessed Documents",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [450, 300],
      "credentials": {
        "postgres": {
          "id": "asb-postgres",
          "name": "ASB PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 10,
        "options": {}
      },
      "id": "split_batches",
      "name": "Split into Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process each document\nconst items = $input.all();\nconst processedItems = [];\n\nfor (const item of items) {\n  const doc = item.json;\n  \n  // Text preprocessing\n  const processedContent = doc.content\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s]/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim();\n  \n  // Extract keywords\n  const words = processedContent.split(' ');\n  const wordFreq = {};\n  words.forEach(word => {\n    if (word.length > 3) {\n      wordFreq[word] = (wordFreq[word] || 0) + 1;\n    }\n  });\n  \n  const keywords = Object.entries(wordFreq)\n    .sort((a, b) => b[1] - a[1])\n    .slice(0, 10)\n    .map(([word]) => word);\n  \n  processedItems.push({\n    json: {\n      id: doc.id,\n      original_content: doc.content,\n      processed_content: processedContent,\n      keywords: keywords,\n      metadata: {\n        ...doc.metadata,\n        processed_at: new Date().toISOString(),\n        word_count: words.length,\n        keyword_count: keywords.length\n      }\n    }\n  });\n}\n\nreturn processedItems;"
      },
      "id": "transform_data",
      "name": "Transform Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "model": "text-embedding-ada-002",
        "options": {
          "batchSize": 100
        }
      },
      "id": "generate_embeddings",
      "name": "Generate Embeddings",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1050, 300],
      "credentials": {
        "openAiApi": {
          "id": "asb-openai",
          "name": "ASB OpenAI"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO embeddings (document_id, embedding, metadata) VALUES ($1, $2, $3) ON CONFLICT (document_id) DO UPDATE SET embedding = $2, metadata = $3, updated_at = NOW()",
        "options": {
          "queryBatching": "independently"
        }
      },
      "id": "store_embeddings",
      "name": "Store Embeddings",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [1250, 300],
      "credentials": {
        "postgres": {
          "id": "asb-postgres",
          "name": "ASB PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "command": "SET",
        "key": "asb:pipeline:last_run",
        "value": "={{ JSON.stringify({ timestamp: new Date().toISOString(), processed: $items().length, status: 'success' }) }}",
        "expire": false
      },
      "id": "update_redis",
      "name": "Update Redis Cache",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1450, 300],
      "credentials": {
        "redis": {
          "id": "asb-redis",
          "name": "ASB Redis"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "pipeline_status",
              "value": "completed"
            },
            {
              "name": "timestamp",
              "value": "={{ new Date().toISOString() }}"
            }
          ],
          "number": [
            {
              "name": "total_processed",
              "value": "={{ $items().length }}"
            }
          ]
        },
        "options": {}
      },
      "id": "pipeline_summary",
      "name": "Pipeline Summary",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [1650, 300]
    }
  ],
  "connections": {
    "schedule_trigger": {
      "main": [
        [
          {
            "node": "fetch_documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_documents": {
      "main": [
        [
          {
            "node": "split_batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split_batches": {
      "main": [
        [
          {
            "node": "transform_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "transform_data": {
      "main": [
        [
          {
            "node": "generate_embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate_embeddings": {
      "main": [
        [
          {
            "node": "store_embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "store_embeddings": {
      "main": [
        [
          {
            "node": "update_redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update_redis": {
      "main": [
        [
          {
            "node": "split_batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split_batches": {
      "main": [
        [
          {
            "node": "transform_data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "pipeline_summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveDataSuccessExecution": "all",
    "saveDataErrorExecution": "all",
    "executionTimeout": 900,
    "maxExecutionTimeout": 1800
  }
}