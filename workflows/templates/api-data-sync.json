{
  "name": "API Data Sync",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 15
            }
          ]
        }
      },
      "id": "schedule_sync",
      "name": "Schedule Sync",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $json.apiEndpoint || 'https://api.example.com/data' }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "responseFormat": "json",
        "options": {
          "timeout": 30000,
          "pagination": {
            "paginationMode": "responseContainsNextURL",
            "nextURL": "={{ $response.next }}",
            "paginationCompleteWhen": "receiveSpecificStatusCodes",
            "statusCodes": "404"
          }
        }
      },
      "id": "http_request",
      "name": "Fetch API Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [450, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "1",
          "name": "API Auth"
        }
      }
    },
    {
      "parameters": {
        "operation": "query",
        "query": "SELECT id, updated_at FROM api_sync_data WHERE source = '{{ $json.source }}' ORDER BY updated_at DESC LIMIT 1"
      },
      "id": "get_last_sync",
      "name": "Get Last Sync",
      "type": "pgvectorQuery",
      "typeVersion": 1,
      "position": [650, 300],
      "credentials": {
        "pgvectorApi": {
          "id": "1",
          "name": "PgVector DB"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "dateTime": [
            {
              "value1": "={{ $json.updated_at }}",
              "operation": "after",
              "value2": "={{ $node['get_last_sync'].json.updated_at || '1970-01-01' }}"
            }
          ]
        }
      },
      "id": "filter_new_data",
      "name": "Filter New Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "operation": "transform",
        "transformType": "jmespath",
        "expression": "{{ '{id: id, title: title, content: description || content || summary, metadata: {source: source, category: category, tags: tags, updated_at: updated_at}}' }}"
      },
      "id": "transform_data",
      "name": "Transform Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 250]
    },
    {
      "parameters": {
        "text": "={{ $json.title + ' ' + $json.content }}",
        "chunkSize": 1000,
        "chunkOverlap": 100
      },
      "id": "chunk_content",
      "name": "Chunk Content",
      "type": "textChunk",
      "typeVersion": 1,
      "position": [1250, 250]
    },
    {
      "parameters": {
        "operation": "embedStore",
        "text": "={{ $json.text }}",
        "documentId": "={{ 'api_' + $node['transform_data'].json.id + '_' + $json.chunk_index }}",
        "metadata": "={{ JSON.stringify($node['transform_data'].json.metadata) }}"
      },
      "id": "generate_embeddings",
      "name": "Generate Embeddings",
      "type": "aliceSemanticBridgeEnhanced",
      "typeVersion": 1,
      "position": [1450, 250],
      "credentials": {
        "aliceSemanticBridgeApi": {
          "id": "1",
          "name": "Alice API"
        }
      }
    },
    {
      "parameters": {
        "documents": "={{ $json }}",
        "collection": "api_sync_data",
        "upsertMode": "merge"
      },
      "id": "store_pgvector",
      "name": "Store in PgVector",
      "type": "pgvectorUpsert",
      "typeVersion": 1,
      "position": [1650, 250],
      "credentials": {
        "pgvectorApi": {
          "id": "1",
          "name": "PgVector DB"
        }
      }
    },
    {
      "parameters": {
        "key": "api_sync:{{ $json.source }}:last_sync",
        "value": "={{ JSON.stringify({ timestamp: $now, items_synced: $items('store_pgvector').length }) }}",
        "ttl": 86400
      },
      "id": "cache_sync_status",
      "name": "Cache Sync Status",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 2,
      "position": [1850, 250],
      "credentials": {
        "redis": {
          "id": "1",
          "name": "Redis Cache"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "no_new_data"
            },
            {
              "name": "message",
              "value": "No new data to sync"
            }
          ]
        },
        "options": {}
      },
      "id": "set_no_data",
      "name": "Set No Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [1050, 350]
    },
    {
      "parameters": {
        "channel": "api:sync:complete",
        "message": "={{ JSON.stringify({ source: $json.source, itemsSynced: $items('store_pgvector').length || 0, timestamp: $now }) }}"
      },
      "id": "redis_notify",
      "name": "Redis Notification",
      "type": "redisPublish",
      "typeVersion": 1,
      "position": [2050, 300],
      "credentials": {
        "redisApi": {
          "id": "1",
          "name": "Redis Cache"
        }
      }
    },
    {
      "parameters": {
        "operation": "logActivity",
        "activityType": "api_sync",
        "details": "={{ JSON.stringify({ source: $json.source, endpoint: $node['schedule_sync'].json.apiEndpoint, itemsSynced: $items('store_pgvector').length || 0, lastSync: $now }) }}"
      },
      "id": "log_activity",
      "name": "Log Activity",
      "type": "dashboard",
      "typeVersion": 1,
      "position": [2250, 300]
    },
    {
      "parameters": {
        "errorMessage": "API sync failed",
        "continueOnFail": true
      },
      "id": "error_handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [250, 500]
    },
    {
      "parameters": {
        "channel": "api:sync:error",
        "message": "={{ JSON.stringify({ error: $json.error, source: $json.source, timestamp: $now }) }}"
      },
      "id": "redis_error_notify",
      "name": "Redis Error Notify",
      "type": "redisPublish",
      "typeVersion": 1,
      "position": [450, 500],
      "credentials": {
        "redisApi": {
          "id": "1",
          "name": "Redis Cache"
        }
      }
    }
  ],
  "connections": {
    "Schedule Sync": {
      "main": [
        [
          {
            "node": "Fetch API Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch API Data": {
      "main": [
        [
          {
            "node": "Get Last Sync",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Last Sync": {
      "main": [
        [
          {
            "node": "Filter New Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter New Data": {
      "main": [
        [
          {
            "node": "Transform Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set No Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Data": {
      "main": [
        [
          {
            "node": "Chunk Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chunk Content": {
      "main": [
        [
          {
            "node": "Generate Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Embeddings": {
      "main": [
        [
          {
            "node": "Store in PgVector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store in PgVector": {
      "main": [
        [
          {
            "node": "Cache Sync Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache Sync Status": {
      "main": [
        [
          {
            "node": "Redis Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Notification": {
      "main": [
        [
          {
            "node": "Log Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set No Data": {
      "main": [
        [
          {
            "node": "Redis Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Redis Error Notify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveDataSuccessExecution": "all",
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "executionTimeout": 600,
    "errorWorkflow": "error-handler"
  },
  "tags": ["template", "api", "data-sync", "pgvector", "scheduled"],
  "pinData": {},
  "versionId": "1.0.0"
}